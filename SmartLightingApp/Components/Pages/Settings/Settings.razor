@page "/settings"
@page "/settings/{ipAddress}"
@using TasmotaSharp
@using TasmotaSharp.Models
@inject TasmotaClient tasmotaClient
@inject NavigationManager navigation
@inject IJSRuntime JSRuntime
@inject ILocalizationService Localization
@implements IDisposable

<!-- Settings Header -->
<div class="header">
    <div class="header-left">
        <button class="back-btn" @onclick="GoBack">
            <i class="fas fa-arrow-left"></i>
        </button>
        <div class="header-icon">
            <i class="fas fa-cog"></i>
        </div>
        <div class="header-title">
            <h1>@Localization.Current.General.Settings.Title</h1>
            <p class="header-subtitle">@CurrentIpAddress</p>
        </div>
    </div>
</div>

<!-- Device Status Card -->
<div class="settings-section">
    <div class="status-card">
        <div class="card-header">
            <i class="fas fa-info-circle"></i>
            <h3>@Localization.Current.General.Settings.DeviceStatus</h3>
        </div>
        <div class="card-content">
            @if (isLoadingStatus)
            {
                <div class="loading-indicator">
                    <i class="fas fa-spinner fa-spin"></i>
                    <span>@Localization.Current.General.Settings.CheckingDeviceInfo</span>
                </div>
            }
            else if (deviceStatus != null)
            {
                <div class="status-info">
                    <div class="status-item">
                        <span class="label">@Localization.Current.General.Settings.Connection</span>
                        <span class="value success">@Localization.Current.General.Settings.Successful</span>
                    </div>
                    <div class="status-item">
                        <span class="label">@Localization.Current.General.Settings.Firmware</span>
                        <span class="value">@deviceStatus.StatusFWR?.Version</span>
                    </div>
                    <div class="status-item">
                        <span class="label">@Localization.Current.General.Settings.WifiMode</span>
                        <span class="value">@GetWifiModeText()</span>
                    </div>
                    @if (!string.IsNullOrEmpty(deviceStatus.StatusSTS?.Wifi?.SSId))
                    {
                        <div class="status-item">
                            <span class="label">@Localization.Current.General.Settings.ConnectedNetwork</span>
                            <span class="value">@deviceStatus.StatusSTS.Wifi.SSId</span>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="error-info">
                    <i class="fas fa-exclamation-triangle"></i>
                    <p>@Localization.Current.General.Settings.CannotConnectToDevice</p>
                    <small>IP: @CurrentIpAddress</small>
                </div>
            }
        </div>
    </div>
</div>

<!-- WiFi Configuration Card -->
<div class="settings-section">
    <div class="wifi-card">
        <div class="card-header">
            <i class="fas fa-wifi"></i>
            <h3>@Localization.Current.General.Settings.WifiConfiguration</h3>
        </div>
        <div class="card-content">
            @if (deviceStatus == null)
            {
                <!-- İlk Kurulum Senaryosu -->
                <div class="setup-section">
                    <h4>@Localization.Current.General.Settings.InitialSetup</h4>
                    <p>@Localization.Current.General.Settings.InitialSetupDescription</p>
                    
                    <div class="wifi-scan-section">
                        <button class="btn-primary-custom @(isScanning ? "btn-loading" : "")" 
                                @onclick="ScanWifiNetworks" 
                                disabled="@isScanning">
                            <i class="fas @(isScanning ? "fa-spinner fa-spin" : "fa-search")"></i>
                            @(isScanning ? @Localization.Current.General.Settings.Scanning : @Localization.Current.General.Settings.ScanWifiNetworks)
                        </button>
                    </div>

                    @if (wifiNetworks?.Any() == true)
                    {
                        <div class="network-list">
                            <h5>@Localization.Current.General.Settings.AvailableNetworks</h5>
                            @foreach (var network in wifiNetworks.Take(10))
                            {
                                <div class="network-item @(selectedSsid == network.SSID ? "selected" : "")"
                                     @onclick="() => SelectNetwork(network.SSID)">
                                    <div class="network-info">
                                        <span class="ssid">@network.SSID</span>
                                        <span class="signal">@GetSignalIcon(network.RssiPercent ?? 0)</span>
                                    </div>
                                    <div class="network-details">
                                        <small>@network.Encryption</small>
                                    </div>
                                </div>
                            }
                        </div>
                    }

                    <div class="wifi-credentials">
                        <div class="form-group">
                            <label>@Localization.Current.General.Settings.WifiNetwork</label>
                            <input type="text" class="form-input" @bind="selectedSsid" placeholder="@Localization.Current.General.Settings.WifiNetworkPlaceholder" />
                        </div>
                        <div class="form-group">
                            <label>@Localization.Current.General.Settings.Password</label>
                            <input type="password" class="form-input" @bind="wifiPassword" placeholder="@Localization.Current.General.Settings.WifiPasswordPlaceholder" />
                        </div>
                    </div>

                    <div class="setup-actions">
                        <button class="btn-primary-custom @(isSavingWifi ? "btn-loading" : "")" 
                                @onclick="SetupWifiConnection" 
                                disabled="@(isSavingWifi || string.IsNullOrEmpty(selectedSsid))">
                            <i class="fas @(isSavingWifi ? "fa-spinner fa-spin" : "fa-save")"></i>
                            @(isSavingWifi ? @Localization.Current.General.Settings.Saving : @Localization.Current.General.Settings.SaveWifiSettings)
                        </button>
                    </div>
                </div>
            }
            else
            {
                <!-- Mevcut Bağlantı Senaryosu -->
                <div class="current-connection">
                    <h4>@Localization.Current.General.Settings.CurrentConnection</h4>
                    <div class="connection-info">
                        <div class="info-item">
                            <i class="fas fa-wifi"></i>
                            <span>@deviceStatus.StatusSTS?.Wifi?.SSId</span>
                        </div>
                        <div class="info-item">
                            <i class="fas fa-signal"></i>
                            <span>@(string.Format(@Localization.Current.General.Settings.Signal, deviceStatus.StatusSTS?.Wifi?.RSSI ?? 0))</span>
                        </div>
                    </div>
                    
                    <div class="connection-actions">
                        <button class="btn-secondary-custom" @onclick="ShowChangeWifi">
                            <i class="fas fa-edit"></i>
                            @Localization.Current.General.Settings.ChangeWifi
                        </button>
                        <button class="btn-secondary-custom" @onclick="RepairWifiConnection">
                            <i class="fas fa-wrench"></i>
                            @Localization.Current.General.Settings.WifiRepair
                        </button>
                    </div>

                    @if (showWifiChange)
                    {
                        <div class="wifi-change-section">
                            <hr style="margin: 20px 0; border: 1px solid var(--border-color);" />
                            <h5>@Localization.Current.General.Settings.SelectNewWifiNetwork</h5>

                            <div class="wifi-scan-section">
                                <button class="btn-primary-custom @(isScanning ? "btn-loading" : "")" 
                                        @onclick="ScanWifiNetworks" 
                                        disabled="@isScanning">
                                    <i class="fas @(isScanning ? "fa-spinner fa-spin" : "fa-search")"></i>
                                    @(isScanning ? @Localization.Current.General.Settings.Scanning : @Localization.Current.General.Settings.RefreshNetworks)
                                </button>
                            </div>

                            @if (wifiNetworks?.Any() == true)
                            {
                                <div class="network-list">
                                    @foreach (var network in wifiNetworks.Take(10))
                                    {
                                        <div class="network-item @(selectedSsid == network.SSID ? "selected" : "")"
                                             @onclick="() => SelectNetwork(network.SSID)">
                                            <div class="network-info">
                                                <span class="ssid">@network.SSID</span>
                                                <span class="signal">@GetSignalIcon(network.RssiPercent ?? 0)</span>
                                            </div>
                                            <div class="network-details">
                                                <small>@network.Encryption</small>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }

                            <div class="wifi-credentials">
                                <div class="form-group">
                                    <label>@Localization.Current.General.Settings.WifiNetwork</label>
                                    <input type="text" class="form-input" @bind="selectedSsid" placeholder="@Localization.Current.General.Settings.WifiNetworkPlaceholder" />
                                </div>
                                <div class="form-group">
                                    <label>@Localization.Current.General.Settings.Password</label>
                                    <input type="password" class="form-input" @bind="wifiPassword" placeholder="@Localization.Current.General.Settings.WifiPasswordPlaceholder" />
                                </div>
                            </div>

                            <div class="change-actions">
                                <button class="btn-primary-custom @(isSavingWifi ? "btn-loading" : "")" 
                                        @onclick="ChangeWifiConnection" 
                                        disabled="@(isSavingWifi || string.IsNullOrEmpty(selectedSsid))">
                                    <i class="fas @(isSavingWifi ? "fa-spinner fa-spin" : "fa-save")"></i>
                                    @(isSavingWifi ? @Localization.Current.General.Settings.Changing : @Localization.Current.General.Settings.ChangeWifi)
                                </button>
                                <button class="btn-secondary-custom" @onclick="CancelWifiChange">
                                    <i class="fas fa-times"></i>
                                    @Localization.Current.General.Settings.Cancel
                                </button>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

<!-- Quick Actions -->
<div class="settings-section">
    <div class="actions-card">
        <div class="card-header">
            <i class="fas fa-tools"></i>
            <h3>@Localization.Current.General.Settings.QuickActions</h3>
        </div>
        <div class="card-content">
            <div class="action-buttons">
                <button class="btn-secondary-custom" @onclick="RestartDevice">
                    <i class="fas fa-power-off"></i>
                    @Localization.Current.General.Settings.RestartDevice
                </button>
                <button class="btn-secondary-custom" @onclick="EnableMdns">
                    <i class="fas fa-broadcast-tower"></i>
                    @Localization.Current.General.Settings.EnableMdns
                </button>
                <button class="btn-danger-custom" @onclick="ShowFactoryReset">
                    <i class="fas fa-exclamation-triangle"></i>
                    @Localization.Current.General.Settings.FactoryReset
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Bottom Safe Area -->
<div class="bottom-safe-area"></div>

@code {
    [Parameter] public string? IpAddress { get; set; }
    
    private string CurrentIpAddress => IpAddress ?? "192.168.4.1"; // Tasmota AP default IP
    private TasmotaStatus? deviceStatus;
    private List<WifiScanResult>? wifiNetworks;
    private string selectedSsid = "";
    private string wifiPassword = "";
    private bool showWifiChange = false;
    
    private bool isLoadingStatus = false;
    private bool isScanning = false;
    private bool isSavingWifi = false;

    protected override async Task OnInitializedAsync()
    {
        Localization.LanguageChanged += OnLanguageChanged;
        await LoadDeviceStatus();
    }

    private void OnLanguageChanged(object sender, LanguageChangedEventArgs e)
    {
        InvokeAsync(StateHasChanged); // Update UI
    }

    private async Task LoadDeviceStatus()
    {
        try
        {
            isLoadingStatus = true;
            StateHasChanged();

            tasmotaClient.SetIp(CurrentIpAddress);
            deviceStatus = await tasmotaClient.GetStatusAsync();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.log", $"Device status error: {ex.Message}");
            deviceStatus = null;
        }
        finally
        {
            isLoadingStatus = false;
            StateHasChanged();
        }
    }

    private string GetWifiModeText()
    {
        // WifiConfig değerine göre mode belirleme
        // 2 = AP Mode + Config, 4 = Client Mode
        if (deviceStatus?.StatusNET?.WifiConfig == 2)
            return @Localization.Current.General.Settings.ApConfigMode;
        
        return deviceStatus?.StatusSTS?.Wifi?.SSId != null ? @Localization.Current.General.Settings.ClientMode : @Localization.Current.General.Settings.ApMode;
    }

    private async Task ScanWifiNetworks()
    {
        try
        {
            isScanning = true;
            StateHasChanged();

            var scanResults = await tasmotaClient.ScanWifiAsync();

            // Aynı SSID'leri grupla, RSSI en yüksek olanı seç
            wifiNetworks = scanResults?
                .GroupBy(n => n.SSID)
                .Select(g => g.OrderByDescending(n => n.RssiPercent ?? 0).First())
                .OrderByDescending(n => n.RssiPercent ?? 0) // listeyi güçlüden zayıfa sırala
                .ToList();
            
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showErrorAlert", 
                Localization.Current.General.Settings.ScanError, ex.Message);
        }
        finally
        {
            isScanning = false;
            StateHasChanged();
        }
    }

    private void SelectNetwork(string? ssid)
    {
        if (!string.IsNullOrEmpty(ssid))
        {
            selectedSsid = ssid;
            StateHasChanged();
        }
    }

    private string GetSignalIcon(int rssi)
    {
        return rssi switch
        {
            >= 75 => "📶",
            >= 50 => "📶",
            >= 25 => "📶",
            _ => "📶"
        };
    }

    private async Task SetupWifiConnection()
    {
        if (string.IsNullOrEmpty(selectedSsid))
        {
            await JSRuntime.InvokeVoidAsync("showErrorAlert", @Localization.Current.General.Settings.Error, @Localization.Current.General.Settings.PleaseSelectWifiNetwork);
            return;
        }

        try
        {
            isSavingWifi = true;
            StateHasChanged();

            // 1. mDNS aktifleştir
            await tasmotaClient.EnableMdnsAsync(true);
            
            // 2. WifiConfig 2 (AP + Config mode)
            await tasmotaClient.SetWifiRecoveryModeAsync(WifiRecoveryMode.AccessPoint);
            
            // 3. WiFi credentials kaydet
            await tasmotaClient.SetWifiCredentialsAsync(selectedSsid, wifiPassword, false);

            await JSRuntime.InvokeVoidAsync("showSuccessAlert", 
                @Localization.Current.General.Settings.WifiSettingsSaved, 
                string.Format(@Localization.Current.General.Settings.WifiSettingsSavedMessage, selectedSsid));

            // Sayfa yenileme veya ana sayfaya dönüş
            await Task.Delay(3000);
            navigation.NavigateTo("/");
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showErrorAlert", @Localization.Current.General.Settings.SaveError, ex.Message);
        }
        finally
        {
            isSavingWifi = false;
            StateHasChanged();
        }
    }

    private async Task ShowChangeWifi()
    {
        showWifiChange = true;
        await ScanWifiNetworks();
        StateHasChanged();
    }

    private async Task ChangeWifiConnection()
    {
        if (string.IsNullOrEmpty(selectedSsid))
        {
            await JSRuntime.InvokeVoidAsync("showErrorAlert", @Localization.Current.General.Settings.Error, @Localization.Current.General.Settings.PleaseSelectWifiNetwork);
            return;
        }

        try
        {
            isSavingWifi = true;
            StateHasChanged();

            // Mevcut bağlantı için WiFi değiştirme
            await tasmotaClient.EnableMdnsAsync(true);
            
            // 2. WifiConfig 2 (AP + Config mode)
            //await tasmotaClient.SetWifiRecoveryModeAsync(WifiRecoveryMode.AccessPoint);
            await tasmotaClient.SetWifiCredentialsAsync(selectedSsid, wifiPassword, false);

            await JSRuntime.InvokeVoidAsync("showSuccessAlert", 
                @Localization.Current.General.Settings.WifiChanged, 
                string.Format(@Localization.Current.General.Settings.WifiChangedMessage, selectedSsid));

            showWifiChange = false;
            await Task.Delay(2000);
            await LoadDeviceStatus(); // Durumu yenile
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showErrorAlert", @Localization.Current.General.Settings.WifiChangeError, ex.Message);
        }
        finally
        {
            isSavingWifi = false;
            StateHasChanged();
        }
    }

    private void CancelWifiChange()
    {
        showWifiChange = false;
        selectedSsid = "";
        wifiPassword = "";
        StateHasChanged();
    }

    private async Task RepairWifiConnection()
    {
        try
        {
            await tasmotaClient.SetWifiRecoveryModeAsync(WifiRecoveryMode.AccessPoint);
            await tasmotaClient.RestartAsync();
            await JSRuntime.InvokeVoidAsync("showInfoAlert", 
                @Localization.Current.General.Settings.WifiRepairTitle, 
                @Localization.Current.General.Settings.WifiRepairMessage);
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showErrorAlert", @Localization.Current.General.Settings.RepairError, ex.Message);
        }
    }

    private async Task RestartDevice()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("showDeleteConfirmation", 
            @Localization.Current.General.Settings.RestartDeviceTitle, 
            @Localization.Current.General.Settings.RestartDeviceConfirm,
            @Localization.Current.General.Settings.RestartConfirm,    // "Evet, Yeniden Başlat"
            @Localization.Current.General.Settings.RestartCancel);    // "İptal"
        if (confirmed)
        {
            await tasmotaClient.RestartAsync();
            await JSRuntime.InvokeVoidAsync("showInfoAlert", 
                @Localization.Current.General.Settings.RestartingTitle, 
                @Localization.Current.General.Settings.RestartingMessage,
                @Localization.Current.General.Settings.Ok);
        }
    }

    private async Task EnableMdns()
    {
        try
        {
            await tasmotaClient.EnableMdnsAsync(true);
            await JSRuntime.InvokeVoidAsync("showSuccessAlert", 
                @Localization.Current.General.Settings.MdnsTitle, 
                @Localization.Current.General.Settings.MdnsSuccess,
                @Localization.Current.General.Settings.Ok);       // confirmText
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("showErrorAlert", 
                @Localization.Current.General.Settings.MdnsError, 
                ex.Message,
                @Localization.Current.General.Settings.Ok);       // confirmText
        }
    }

    private async Task ShowFactoryReset()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("showDeleteConfirmation", 
            @Localization.Current.General.Settings.FactoryResetTitle, 
            @Localization.Current.General.Settings.FactoryResetConfirm,
            @Localization.Current.General.BoardCard.DeleteYes,    // confirmText
            @Localization.Current.General.BoardCard.DeleteNo);    // cancelText
    
        if (confirmed)
        {
            await tasmotaClient.FactoryResetAsync(2);
            await JSRuntime.InvokeVoidAsync("showInfoAlert", 
                @Localization.Current.General.Settings.FactoryResetTitle, 
                @Localization.Current.General.Settings.FactoryResetMessage,
                @Localization.Current.General.Settings.Ok);       // confirmText
        }
    }


    private void GoBack()
    {
        navigation.NavigateTo("/");
    }

    public void Dispose()
    {
        Localization.LanguageChanged -= OnLanguageChanged;
    }
}